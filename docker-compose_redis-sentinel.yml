
# docker exec redis-sentinel redis-cli -p 26379 SENTINEL get-master-addr-by-name mymaster
# docker exec redis-sentinel redis-cli -p 26379 info Sentinel
# docker exec redis-sentinel redis-cli -p 26379 sentinel slaves mymaster

version: '2.1'
services:
  redis-master:
    extends:
      file: docker-compose-base.yml
      service: base-redis
    command: ["redis-server", "--port", "6379", "--min-slaves-to-write", "1", "--min-slaves-max-lag", "10", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
    container_name: ${CONTAINER_HOST_NAME:-redis-master}
    hostname: ${CONTAINER_HOST_NAME:-redis-master}
    network_mode: "host"
#    networks:
#      local-network:
#        ipv4_address: ${IPV4_ADDRESS:-172.16.238.47}
#        ipv6_address: ${IPV6_ADDRESS:-2001:3984:3989::47}
    ports:
    - "${EXTERNAL_REDIS_6379_PORT:-6379}:6379"
    restart: always
    volumes:
    - data-master:/data

  redis-sentinel:
    extends:
      file: docker-compose-base.yml
      service: base-redis
    command: ["redis-server", "/etc/redis/sentinel.conf", "--sentinel"]
    container_name: ${CONTAINER_HOST_NAME:-redis-sentinel}
    environment:
    - SENTINEL_CAN_FAILOVER=yes
    - SENTINEL_DOWN_AFTER=30000
    - SENTINEL_FAILOVER_TIMEOUT=180000
    #- SENTINEL_MASTER_HOSTORIP=redis-master
    #- SENTINEL_MASTER_HOSTORIP=host.docker.internal
    - SENTINEL_MASTER_HOSTORIP=127.0.0.1
    - SENTINEL_MASTER_NAME=mymaster
    - SENTINEL_MASTER_PORT=6379
    - SENTINEL_PARALLEL_SYNCS=1
    - SENTINEL_PORT=26379
    - SENTINEL_QUORUM=2
    hostname: ${CONTAINER_HOST_NAME:-redis-sentinel}
    network_mode: "host"
#    networks:
#      local-network:
#        ipv4_address: ${IPV4_ADDRESS:-172.16.238.49}
#        ipv6_address: ${IPV6_ADDRESS:-2001:3984:3989::49}
    ports:
    - "${SENTINEL_PORT:-26379}:26379"
    restart: always
    volumes:
    - data-sentinel:/data

  redis-slave:
    extends:
      file: docker-compose-base.yml
      service: base-redis
    #command: ["redis-server", "--slaveof", "redis-master", "6379", "--port", "6381"]
    #command: ["redis-server", "--slaveof", "host.docker.internal", "6379", "--port", "6381"]
    command: ["redis-server", "--slaveof", "127.0.0.1", "6379", "--port", "6381", "--min-slaves-to-write", "1", "--min-slaves-max-lag", "10", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
    container_name: ${CONTAINER_HOST_NAME:-redis-slave}
    hostname: ${CONTAINER_HOST_NAME:-redis-slave}
    network_mode: "host"
#    networks:
#      local-network:
#        ipv4_address: ${IPV4_ADDRESS:-172.16.238.52}
#        ipv6_address: ${IPV6_ADDRESS:-2001:3984:3989::52}
    ports:
    - "6381:6381"
    restart: always
    volumes:
    - data-slave:/data


#networks:
#  local-network:
#    external: true
#    driver: bridge
#    enable_ipv6: true
#    ipam:
#      driver: default
#      config:
#      - subnet: 172.16.238.0/24
#      - subnet: 2001:3984:3989::/64


volumes:
  data-master:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/master
      o: bind
  data-sentinel:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/sentinel
      o: bind
  data-slave:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/slave
      o: bind
